{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\dccxx\\\\Projects\\\\js\\\\xstate-catalogue\\\\pages\\\\views\\\\[id].tsx\";\nimport { inspect } from \"@xstate/inspect\";\nimport { useInterpret } from \"@xstate/react\";\nimport Head from \"next/head\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useLayout } from \"../../lib/GlobalState\";\nimport { MachineHelpersContext } from \"../../lib/MachineHelpers\";\nimport { metadata } from \"../../lib/metadata\";\nimport $ from \"jquery\";\n\nconst useGetImports = (slug, deps) => {\n  const {\n    0: imports,\n    1: setImports\n  } = useState();\n\n  const getMachine = async () => {\n    setImports(undefined);\n    const machineImport = await import(`../../lib/machines/${slug}.machine.ts`);\n    const mdxDoc = await import(`../../lib/machines/${slug}.mdx`);\n    setImports({\n      machine: machineImport.default,\n      mdxDoc: mdxDoc.default,\n      mdxMetadata: mdxDoc.metadata\n    });\n  };\n\n  useEffect(() => {\n    getMachine();\n  }, [slug, ...deps]);\n  return imports;\n};\n\nexport const getStaticProps = async ({\n  params\n}) => {\n  const fs = await import(\"fs\");\n  const path = await import(\"path\");\n  const machinesPath = path.resolve(process.cwd(), \"lib/machines\", `${params.id}.machine.ts`);\n  const meta = metadata[params.id];\n\n  if (!meta) {\n    throw new Error(`Could not find metadata for ${params.id}. Go to lib/metadata.ts to fix.`);\n  }\n\n  return {\n    props: {\n      slug: params.id,\n      fileText: fs.readFileSync(machinesPath).toString(),\n      meta\n    }\n  };\n};\n\nconst MachinePage = props => {\n  const layout = useLayout();\n  const imports = useGetImports(props.slug, [layout]);\n  const iframeRef = useRef(null);\n\n  const _onLoad = () => {\n    const $iframe = $('iframe[data-id=\"mod\"]').contents();\n    console.log($iframe);\n  };\n\n  useEffect(() => {\n    const {\n      disconnect\n    } = inspect({\n      iframe: () => iframeRef.current,\n      // url: \"http://localhost:3000/api/inspect\",\n      url: \"https://statecharts.io/inspect\"\n    });\n    return () => {\n      disconnect();\n    };\n  }, [layout, props.slug]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: [props.meta.title, \" | XState Catalogue\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Layout, {\n      content: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: imports && /*#__PURE__*/_jsxDEV(ShowMachinePage, {\n          slug: props.slug,\n          machine: imports.machine,\n          mdxDoc: imports.mdxDoc,\n          fileText: props.fileText,\n          meta: props.meta,\n          mdxMetadata: imports.mdxMetadata\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this)\n      }, void 0, false),\n      iframe: /*#__PURE__*/_jsxDEV(\"iframe\", {\n        ref: iframeRef,\n        className: \"w-full h-full\",\n        \"data-id\": \"mod\",\n        onLoad: _onLoad\n      }, \"iframe\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nconst Layout = props => {\n  useEffect(() => {\n    document.body.style.overflowY = \"hidden\";\n    return () => {\n      document.body.style.overflowY = \"auto\";\n    };\n  }, [props.content, props.iframe]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hidden mb-16 bg-black md:block\",\n      style: {\n        height: \"calc(100vh - 50px)\"\n      },\n      children: props.iframe\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: props.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n\nconst ShowMachinePage = props => {\n  const service = useInterpret(props.machine, {\n    devTools: true\n  });\n  return /*#__PURE__*/_jsxDEV(MachineHelpersContext.Provider, {\n    value: {\n      service,\n      metadata: props.mdxMetadata\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 10\n  }, this);\n};\n\nconst machinePathRegex = /\\.machine\\.ts$/;\nexport const getStaticPaths = async () => {\n  const fs = await import(\"fs\");\n  const path = await import(\"path\");\n  const machinesPath = path.resolve(process.cwd(), \"lib/machines\");\n  const machines = fs.readdirSync(machinesPath);\n  return {\n    fallback: false,\n    paths: machines.filter(machine => machine.endsWith(\".ts\")).map(fileName => {\n      return {\n        params: {\n          id: fileName.replace(machinePathRegex, \"\")\n        }\n      };\n    })\n  };\n};\nexport default MachinePage;","map":{"version":3,"sources":["C:/Users/dccxx/Projects/js/xstate-catalogue/pages/views/[id].tsx"],"names":["inspect","useInterpret","Head","React","useEffect","useRef","useState","useLayout","MachineHelpersContext","metadata","$","useGetImports","slug","deps","imports","setImports","getMachine","undefined","machineImport","mdxDoc","machine","default","mdxMetadata","getStaticProps","params","fs","path","machinesPath","resolve","process","cwd","id","meta","Error","props","fileText","readFileSync","toString","MachinePage","layout","iframeRef","_onLoad","$iframe","contents","console","log","disconnect","iframe","current","url","title","Layout","document","body","style","overflowY","content","height","ShowMachinePage","service","devTools","machinePathRegex","getStaticPaths","machines","readdirSync","fallback","paths","filter","endsWith","map","fileName","replace"],"mappings":"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","sourcesContent":["import { inspect } from \"@xstate/inspect\";\nimport { useInterpret } from \"@xstate/react\";\nimport { GetStaticPaths, InferGetStaticPropsType, NextPage } from \"next\";\nimport Head from \"next/head\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { StateMachine } from \"xstate\";\nimport { useLayout } from \"../../lib/GlobalState\";\nimport { MachineHelpersContext, MDXMetadata } from \"../../lib/MachineHelpers\";\nimport { metadata, MetadataItem } from \"../../lib/metadata\";\nimport $ from \"jquery\";\n\nconst useGetImports = (slug: string, deps: any[]) => {\n  const [imports, setImports] = useState<{\n    machine: StateMachine<any, any, any>;\n    mdxDoc: any;\n    mdxMetadata?: MDXMetadata;\n  }>();\n\n  const getMachine = async () => {\n    setImports(undefined);\n    const machineImport: {\n      default: StateMachine<any, any, any>;\n    } = await import(`../../lib/machines/${slug}.machine.ts`);\n\n    const mdxDoc = await import(`../../lib/machines/${slug}.mdx`);\n\n    setImports({\n      machine: machineImport.default,\n      mdxDoc: mdxDoc.default,\n      mdxMetadata: mdxDoc.metadata,\n    });\n  };\n\n  useEffect(() => {\n    getMachine();\n  }, [slug, ...deps]);\n\n  return imports;\n};\n\nexport const getStaticProps = async ({ params }) => {\n  const fs = await import(\"fs\");\n  const path = await import(\"path\");\n\n  const machinesPath = path.resolve(process.cwd(), \"lib/machines\", `${params.id}.machine.ts`);\n\n  const meta = metadata[params.id];\n\n  if (!meta) {\n    throw new Error(`Could not find metadata for ${params.id}. Go to lib/metadata.ts to fix.`);\n  }\n\n  return {\n    props: {\n      slug: params.id as string,\n      fileText: fs.readFileSync(machinesPath).toString(),\n      meta,\n    },\n  };\n};\n\nconst MachinePage: NextPage<InferGetStaticPropsType<typeof getStaticProps>> = (props) => {\n  const layout = useLayout();\n  const imports = useGetImports(props.slug, [layout]);\n  const iframeRef = useRef(null);\n\n  const _onLoad = () => {\n    const $iframe = $('iframe[data-id=\"mod\"]').contents();\n\n    console.log($iframe);\n  };\n\n  useEffect(() => {\n    const { disconnect } = inspect({\n      iframe: () => iframeRef.current,\n      // url: \"http://localhost:3000/api/inspect\",\n      url: \"https://statecharts.io/inspect\",\n    });\n\n    return () => {\n      disconnect();\n    };\n  }, [layout, props.slug]);\n\n  return (\n    <>\n      <Head>\n        <title>{props.meta.title} | XState Catalogue</title>\n      </Head>\n      <Layout\n        content={\n          <>\n            {imports && (\n              <ShowMachinePage\n                slug={props.slug}\n                machine={imports.machine}\n                mdxDoc={imports.mdxDoc}\n                fileText={props.fileText}\n                meta={props.meta}\n                mdxMetadata={imports.mdxMetadata}\n              />\n            )}\n          </>\n        }\n        iframe={\n          <iframe\n            key=\"iframe\"\n            ref={iframeRef}\n            className=\"w-full h-full\"\n            data-id={\"mod\"}\n            onLoad={_onLoad}\n          />\n        }\n      />\n    </>\n  );\n};\n\nconst Layout = (props: { content: React.ReactNode; iframe: React.ReactNode }) => {\n  useEffect(() => {\n    document.body.style.overflowY = \"hidden\";\n\n    return () => {\n      document.body.style.overflowY = \"auto\";\n    };\n  }, [props.content, props.iframe]);\n\n  return (\n    <div>\n      <div className=\"hidden mb-16 bg-black md:block\" style={{ height: \"calc(100vh - 50px)\" }}>\n        {props.iframe}\n      </div>\n      <div>{props.content}</div>\n    </div>\n  );\n};\n\nconst ShowMachinePage = (props: {\n  machine: StateMachine<any, any, any>;\n  mdxDoc: any;\n  fileText: string;\n  slug: string;\n  meta: MetadataItem;\n  mdxMetadata?: MDXMetadata;\n}) => {\n  const service = useInterpret(props.machine, {\n    devTools: true,\n  });\n\n  return <MachineHelpersContext.Provider value={{ service, metadata: props.mdxMetadata }} />;\n};\n\nconst machinePathRegex = /\\.machine\\.ts$/;\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const fs = await import(\"fs\");\n  const path = await import(\"path\");\n\n  const machinesPath = path.resolve(process.cwd(), \"lib/machines\");\n\n  const machines = fs.readdirSync(machinesPath);\n\n  return {\n    fallback: false,\n    paths: machines\n      .filter((machine) => machine.endsWith(\".ts\"))\n      .map((fileName) => {\n        return {\n          params: {\n            id: fileName.replace(machinePathRegex, \"\"),\n          },\n        };\n      }),\n  };\n};\n\nexport default MachinePage;\n"]},"metadata":{},"sourceType":"module"}