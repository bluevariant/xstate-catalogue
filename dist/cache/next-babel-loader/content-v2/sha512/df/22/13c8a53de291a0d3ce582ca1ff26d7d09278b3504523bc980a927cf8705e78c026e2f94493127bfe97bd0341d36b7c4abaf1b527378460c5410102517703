{"ast":null,"code":"import { assign, createMachine } from 'xstate';\nexport var modalsMachine = createMachine({\n  initial: 'idle',\n  context: {\n    searchModalText: ''\n  },\n  states: {\n    idle: {\n      on: {\n        CMD_K_PRESSED: {\n          target: 'showingSearchModal'\n        },\n        CLICK_SEARCH: {\n          target: 'showingSearchModal'\n        }\n      },\n      invoke: {\n        src: 'listenForKeyboardShortcuts'\n      }\n    },\n    showingSearchModal: {\n      on: {\n        CLOSE: 'idle',\n        UPDATE_SEARCH_MODAL_TEXT: {\n          actions: assign(function (context, event) {\n            return {\n              searchModalText: event.text\n            };\n          })\n        }\n      }\n    }\n  }\n}, {\n  services: {\n    listenForKeyboardShortcuts: function listenForKeyboardShortcuts() {\n      return function (send) {\n        var listener = function listener(e) {\n          if ((e.ctrlKey || e.metaKey) && e.key === 'k') {\n            e.preventDefault();\n            send('CMD_K_PRESSED');\n          }\n        };\n\n        document.addEventListener('keydown', listener);\n        return function () {\n          document.removeEventListener('keydown', listener);\n        };\n      };\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/dccxx/Projects/js/xstate-catalogue/lib/modalsMachine.ts"],"names":["assign","createMachine","modalsMachine","initial","context","searchModalText","states","idle","on","CMD_K_PRESSED","target","CLICK_SEARCH","invoke","src","showingSearchModal","CLOSE","UPDATE_SEARCH_MODAL_TEXT","actions","event","text","services","listenForKeyboardShortcuts","send","listener","e","ctrlKey","metaKey","key","preventDefault","document","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,aAAjB,QAA2D,QAA3D;AAuBA,OAAO,IAAMC,aAAa,GAAGD,aAAa,CACxC;AACEE,EAAAA,OAAO,EAAE,MADX;AAEEC,EAAAA,OAAO,EAAE;AACPC,IAAAA,eAAe,EAAE;AADV,GAFX;AAKEC,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAE;AACJC,MAAAA,EAAE,EAAE;AACFC,QAAAA,aAAa,EAAE;AACbC,UAAAA,MAAM,EAAE;AADK,SADb;AAIFC,QAAAA,YAAY,EAAE;AACZD,UAAAA,MAAM,EAAE;AADI;AAJZ,OADA;AASJE,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAE;AADC;AATJ,KADA;AAcNC,IAAAA,kBAAkB,EAAE;AAClBN,MAAAA,EAAE,EAAE;AACFO,QAAAA,KAAK,EAAE,MADL;AAEFC,QAAAA,wBAAwB,EAAE;AACxBC,UAAAA,OAAO,EAAEjB,MAAM,CAAC,UAACI,OAAD,EAAUc,KAAV,EAAoB;AAClC,mBAAO;AACLb,cAAAA,eAAe,EAAEa,KAAK,CAACC;AADlB,aAAP;AAGD,WAJc;AADS;AAFxB;AADc;AAdd;AALV,CADwC,EAkCxC;AACEC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,0BAA0B,EAAE;AAAA,aAAM,UAACC,IAAD,EAAyB;AACzD,YAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,CAAD,EAAsB;AACrC,cAAI,CAACA,CAAC,CAACC,OAAF,IAAaD,CAAC,CAACE,OAAhB,KAA4BF,CAAC,CAACG,GAAF,KAAU,GAA1C,EAA+C;AAC7CH,YAAAA,CAAC,CAACI,cAAF;AACAN,YAAAA,IAAI,CAAC,eAAD,CAAJ;AACD;AACF,SALD;;AAMAO,QAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCP,QAArC;AAEA,eAAO,YAAM;AACXM,UAAAA,QAAQ,CAACE,mBAAT,CAA6B,SAA7B,EAAwCR,QAAxC;AACD,SAFD;AAGD,OAZ2B;AAAA;AADpB;AADZ,CAlCwC,CAAnC","sourcesContent":["import { assign, createMachine, Interpreter, Sender } from 'xstate';\r\n\r\ninterface Context {\r\n  searchModalText: string;\r\n}\r\n\r\ntype Event =\r\n  | {\r\n      type: 'CMD_K_PRESSED';\r\n    }\r\n  | {\r\n      type: 'CLICK_SEARCH';\r\n    }\r\n  | {\r\n      type: 'UPDATE_SEARCH_MODAL_TEXT';\r\n      text: string;\r\n    }\r\n  | {\r\n      type: 'CLOSE';\r\n    };\r\n\r\nexport type ModalsMachineInterpreter = Interpreter<Context, any, Event>;\r\n\r\nexport const modalsMachine = createMachine<Context, Event>(\r\n  {\r\n    initial: 'idle',\r\n    context: {\r\n      searchModalText: '',\r\n    },\r\n    states: {\r\n      idle: {\r\n        on: {\r\n          CMD_K_PRESSED: {\r\n            target: 'showingSearchModal',\r\n          },\r\n          CLICK_SEARCH: {\r\n            target: 'showingSearchModal',\r\n          },\r\n        },\r\n        invoke: {\r\n          src: 'listenForKeyboardShortcuts',\r\n        },\r\n      },\r\n      showingSearchModal: {\r\n        on: {\r\n          CLOSE: 'idle',\r\n          UPDATE_SEARCH_MODAL_TEXT: {\r\n            actions: assign((context, event) => {\r\n              return {\r\n                searchModalText: event.text,\r\n              };\r\n            }),\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n  {\r\n    services: {\r\n      listenForKeyboardShortcuts: () => (send: Sender<Event>) => {\r\n        const listener = (e: KeyboardEvent) => {\r\n          if ((e.ctrlKey || e.metaKey) && e.key === 'k') {\r\n            e.preventDefault();\r\n            send('CMD_K_PRESSED');\r\n          }\r\n        };\r\n        document.addEventListener('keydown', listener);\r\n\r\n        return () => {\r\n          document.removeEventListener('keydown', listener);\r\n        };\r\n      },\r\n    },\r\n  },\r\n);\r\n"]},"metadata":{},"sourceType":"module"}